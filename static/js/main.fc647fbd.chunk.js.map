{"version":3,"sources":["me.png","components/Navbar.js","components/About.js","components/Resume.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","Component","About","index_es","from","x","rotation","src","me","style","marginBottom","alt","Resume","wrapper","width","height","version","xmlns","svgDraw","to","duration","y","stroke","fill","strokeWidth","rx","ry","cx","cy","r","x1","x2","y1","y2","points","d","App","components_Navbar","components_About","components_Resume","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc647fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.ede8a1b5.png\";","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<nav className='animated infinite bounce delay-2s navbar navbar-expand-lg fixed-top'>\n\t\t\t\t{/* <a className='navbar-brand' href='#'>\n\t\t\t\t\tNavbar\n\t\t\t\t</a> */}\n\t\t\t\t<button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarNav'\n\t\t\t\t\taria-controls='navbarNav' aria-expanded='false' aria-label='Toggle navigation'>\n\t\t\t\t\t<span className='navbar-toggler-icon' />\n\t\t\t\t</button>\n\t\t\t\t<div className='collapse navbar-collapse' id='navbarNav'>\n\t\t\t\t\t<ul className='navbar-nav ml-auto'>\n\t\t\t\t\t\t<li className='nav-item active'>\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<a className='nav-link' href='#'>\n\t\t\t\t\t\t\t\t\tabout <span className='sr-only'>(current)</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<a className='nav-link' href='#resume'>\n\t\t\t\t\t\t\t\t\tresume\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<a className='nav-link' href='#'>\n\t\t\t\t\t\t\t\t\tprojects\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t\t<a className='nav-link' href='#'>\n\t\t\t\t\t\t\t\t\tskills\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport me from '../me.png';\nimport { Tween, Timeline, SplitWords, SplitLetters, Controls } from \"react-gsap\";\n\nclass About extends Component {\n\n    render() {\n        let marginBottom = {\n            marginBottom: '20px',\n        }\n\n        const TweenComponent = () => (\n            <Tween from={{ x: '100px', rotation: -360 }}>\n                <h1 className=\"title\">Hi, I'm Anne Marie</h1>\n            </Tween>\n            // <Tween from={{ x: '300px', rotation: -360 }}>\n            //     <SplitWords>\n            //         <div style={{ display: 'inline-block', fontSize: '40px' }}>\n            //             <h1 className=\"title\">Hi, I'm Anne Marie</h1>\n            //         </div>\n            //     </SplitWords>\n            // </Tween>\n        );\n\n        // TweenMax.to(\".me\", 2, { left: 600 })\n\n        return (\n            <div className=\"page\">\n                <div className='about-me-paragraph'>\n                    <TweenComponent />\n                    <p>\n                        Fullstack Software Engineer<br />\n                        JavaScript | React | EmberJS (among other things)<br />\n                        Work Hard, Have Fun, Stay Positive<br />\n                        Chicago, IL<br />\n                        I just like to make things :)<br />\n                    </p>\n                </div>\n                <img src={me} className='me' style={marginBottom} alt='logo' />\n            </div>\n        );\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Tween, Timeline, SplitWords, SplitLetters, Controls } from \"react-gsap\";\n\nclass Resume extends Component {\n    render() {\n\n        return (\n            <div className=\"page resume-align\" id=\"resume\">\n                <h1>Education</h1>\n                <p>The Ohio State University | BS in Business Administration | Specialization: Accounting | May 2015</p>\n                <h1>Experience</h1>\n\n                <Tween\n                    wrapper={\n                        <svg width=\"100\" height=\"250\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" />\n                    }\n                    from={{\n                        svgDraw: 0,\n                    }}\n                    to={{\n                        svgDraw: 1,\n                    }}\n                    duration={2}\n                >\n                    <rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" strokeWidth=\"5\" />\n                    <rect x=\"60\" y=\"10\" rx=\"10\" ry=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" strokeWidth=\"5\" />\n\n                    <circle cx=\"25\" cy=\"75\" r=\"20\" stroke=\"red\" fill=\"transparent\" strokeWidth=\"5\" />\n                    <ellipse cx=\"75\" cy=\"75\" rx=\"20\" ry=\"5\" stroke=\"red\" fill=\"transparent\" strokeWidth=\"5\" />\n\n                    <line x1=\"10\" x2=\"50\" y1=\"110\" y2=\"150\" stroke=\"orange\" strokeWidth=\"5\" />\n                    <polyline points=\"60 110 65 120 70 115 75 130 80 125 85 140 90 135 95 150 100 145\"\n                        stroke=\"orange\" fill=\"transparent\" strokeWidth=\"5\" />\n\n                    <polygon points=\"50 160 55 180 70 180 60 190 65 205 50 195 35 205 40 190 30 180 45 180\"\n                        stroke=\"green\" fill=\"transparent\" strokeWidth=\"5\" />\n\n                    <path d=\"M20,230 Q40,205 50,230 T90,230\" fill=\"none\" stroke=\"blue\" strokeWidth=\"5\" />\n                </Tween>\n            </div>\n        );\n    }\n}\n\nexport default Resume;","import React from 'react';\nimport '../App.css';\nimport Navbar from './Navbar';\nimport About from './About';\nimport Resume from './Resume';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<header className='App-header'>\n\t\t\t\t<Navbar />\n\t\t\t\t<About />\n\t\t\t\t<Resume />\n\t\t\t</header>\n\t\t</div >\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}